package club.wello.mtracker.apiUtil;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "TRACK_INFO".
*/
public class TrackInfoDao extends AbstractDao<TrackInfo, String> {

    public static final String TABLENAME = "TRACK_INFO";

    /**
     * Properties of entity TrackInfo.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property LogisticCode = new Property(0, String.class, "LogisticCode", true, "LOGISTIC_CODE");
        public final static Property JsonString = new Property(1, String.class, "jsonString", false, "JSON_STRING");
        public final static Property CreatedTime = new Property(2, Long.class, "createdTime", false, "CREATED_TIME");
        public final static Property Title = new Property(3, String.class, "title", false, "TITLE");
        public final static Property Readable = new Property(4, boolean.class, "readable", false, "READABLE");
        public final static Property Pushable = new Property(5, boolean.class, "pushable", false, "PUSHABLE");
        public final static Property State = new Property(6, String.class, "State", false, "STATE");
    }


    public TrackInfoDao(DaoConfig config) {
        super(config);
    }
    
    public TrackInfoDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"TRACK_INFO\" (" + //
                "\"LOGISTIC_CODE\" TEXT PRIMARY KEY NOT NULL ," + // 0: LogisticCode
                "\"JSON_STRING\" TEXT," + // 1: jsonString
                "\"CREATED_TIME\" INTEGER," + // 2: createdTime
                "\"TITLE\" TEXT," + // 3: title
                "\"READABLE\" INTEGER NOT NULL ," + // 4: readable
                "\"PUSHABLE\" INTEGER NOT NULL ," + // 5: pushable
                "\"STATE\" TEXT);"); // 6: State
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"TRACK_INFO\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, TrackInfo entity) {
        stmt.clearBindings();
 
        String LogisticCode = entity.getLogisticCode();
        if (LogisticCode != null) {
            stmt.bindString(1, LogisticCode);
        }
 
        String jsonString = entity.getJsonString();
        if (jsonString != null) {
            stmt.bindString(2, jsonString);
        }
 
        Long createdTime = entity.getCreatedTime();
        if (createdTime != null) {
            stmt.bindLong(3, createdTime);
        }
 
        String title = entity.getTitle();
        if (title != null) {
            stmt.bindString(4, title);
        }
        stmt.bindLong(5, entity.getReadable() ? 1L: 0L);
        stmt.bindLong(6, entity.getPushable() ? 1L: 0L);
 
        String State = entity.getState();
        if (State != null) {
            stmt.bindString(7, State);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, TrackInfo entity) {
        stmt.clearBindings();
 
        String LogisticCode = entity.getLogisticCode();
        if (LogisticCode != null) {
            stmt.bindString(1, LogisticCode);
        }
 
        String jsonString = entity.getJsonString();
        if (jsonString != null) {
            stmt.bindString(2, jsonString);
        }
 
        Long createdTime = entity.getCreatedTime();
        if (createdTime != null) {
            stmt.bindLong(3, createdTime);
        }
 
        String title = entity.getTitle();
        if (title != null) {
            stmt.bindString(4, title);
        }
        stmt.bindLong(5, entity.getReadable() ? 1L: 0L);
        stmt.bindLong(6, entity.getPushable() ? 1L: 0L);
 
        String State = entity.getState();
        if (State != null) {
            stmt.bindString(7, State);
        }
    }

    @Override
    public String readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0);
    }    

    @Override
    public TrackInfo readEntity(Cursor cursor, int offset) {
        TrackInfo entity = new TrackInfo( //
            cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0), // LogisticCode
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // jsonString
            cursor.isNull(offset + 2) ? null : cursor.getLong(offset + 2), // createdTime
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // title
            cursor.getShort(offset + 4) != 0, // readable
            cursor.getShort(offset + 5) != 0, // pushable
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6) // State
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, TrackInfo entity, int offset) {
        entity.setLogisticCode(cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0));
        entity.setJsonString(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setCreatedTime(cursor.isNull(offset + 2) ? null : cursor.getLong(offset + 2));
        entity.setTitle(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setReadable(cursor.getShort(offset + 4) != 0);
        entity.setPushable(cursor.getShort(offset + 5) != 0);
        entity.setState(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
     }
    
    @Override
    protected final String updateKeyAfterInsert(TrackInfo entity, long rowId) {
        return entity.getLogisticCode();
    }
    
    @Override
    public String getKey(TrackInfo entity) {
        if(entity != null) {
            return entity.getLogisticCode();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(TrackInfo entity) {
        return entity.getLogisticCode() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
